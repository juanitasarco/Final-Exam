@page "/pagina2"

@inject HttpClient client;

@using System.Net.Http.Json
@using Clase3CorteBlazor.Data

<MudButton OnClick ="(args) => AgregarNuevoRegistro()" Variant="Variant.Filled" Color="Color.Primary">Añadir</MudButton>


<MudDataGrid T="Libro" Items="@Libros" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <Column T="Libro" Field="Libro" Title="Id" IsEditable="false" />
        <Column T="Libro" Field="Titulo" />
        <Column T="Libro" Field="Editorial" />
        <Column T="Libro" Field="Autor"/>

        <Column T="Libro" Field="Pagina" Title="Pagina" />
        <Column T="Libro" Field="Descripcion" Title="Descripcion" />
        <Column T="Libro" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                 <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete"OnClick="(args)=> EliminarEvento(context.Item)" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>



<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class="d-flex">
                <MudSpacer/>
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>
@code {
    private IEnumerable<Libro> Libros = new List<Libro>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;
    private int Numero = 15;

    protected override async Task OnInitializedAsync()
    {
        var elemento = new List<Libro>();
       // _client.BaseAddress = new Uri("Url + /");

        var requestMessage = new HttpRequestMessage(HttpMethod.Get, "... Url");
        //var respuesta = await _client.SendAsync(requestMessage);
        
        Libros = elemento;
    }

    void EliminarEvento(Libro item)
    {

    }
    void AgregarNuevoRegistro()
    {
        Numero = Numero++;
        var elemento = new Libro
            {
                Autor = "Nuevo Autor",
                Titulo = "Nuevo Registro",
                Editorial = "a",
                Pagina = 18,
                Descripcion ="e",
            };
        ((List<Libro>)Libros).Add(elemento);
        StateHasChanged();
    }
    // events
    void StartedEditingItem(Libro item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CancelledEditingItem(Libro item)
    {
        _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    // Este sirve para guardar o actuakizar registros
    void CommittedItemChanges(Libro item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
}
